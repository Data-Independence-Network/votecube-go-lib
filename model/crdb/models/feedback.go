// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package crdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Feedback is an object representing the database table.
type Feedback struct {
	AgeSuitability int64     `boil:"age_suitability" json:"age_suitability" toml:"age_suitability" yaml:"age_suitability"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	FeedbackTypeID int64     `boil:"feedback_type_id" json:"feedback_type_id" toml:"feedback_type_id" yaml:"feedback_type_id"`
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title          string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Text           string    `boil:"text" json:"text" toml:"text" yaml:"text"`
	UserAccountID  int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`

	R *feedbackR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L feedbackL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FeedbackColumns = struct {
	AgeSuitability string
	CreatedAt      string
	FeedbackTypeID string
	ID             string
	Title          string
	Text           string
	UserAccountID  string
}{
	AgeSuitability: "age_suitability",
	CreatedAt:      "created_at",
	FeedbackTypeID: "feedback_type_id",
	ID:             "id",
	Title:          "title",
	Text:           "text",
	UserAccountID:  "user_account_id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var FeedbackWhere = struct {
	AgeSuitability whereHelperint64
	CreatedAt      whereHelpertime_Time
	FeedbackTypeID whereHelperint64
	ID             whereHelperint64
	Title          whereHelperstring
	Text           whereHelperstring
	UserAccountID  whereHelperint64
}{
	AgeSuitability: whereHelperint64{field: "\"feedback\".\"age_suitability\""},
	CreatedAt:      whereHelpertime_Time{field: "\"feedback\".\"created_at\""},
	FeedbackTypeID: whereHelperint64{field: "\"feedback\".\"feedback_type_id\""},
	ID:             whereHelperint64{field: "\"feedback\".\"id\""},
	Title:          whereHelperstring{field: "\"feedback\".\"title\""},
	Text:           whereHelperstring{field: "\"feedback\".\"text\""},
	UserAccountID:  whereHelperint64{field: "\"feedback\".\"user_account_id\""},
}

// FeedbackRels is where relationship names are stored.
var FeedbackRels = struct {
	FeedbackComments string
}{
	FeedbackComments: "FeedbackComments",
}

// feedbackR is where relationships are stored.
type feedbackR struct {
	FeedbackComments FeedbackCommentSlice
}

// NewStruct creates a new relationship struct
func (*feedbackR) NewStruct() *feedbackR {
	return &feedbackR{}
}

// feedbackL is where Load methods for each relationship are stored.
type feedbackL struct{}

var (
	feedbackAllColumns            = []string{"age_suitability", "created_at", "feedback_type_id", "id", "title", "text", "user_account_id"}
	feedbackColumnsWithoutDefault = []string{"age_suitability", "created_at", "feedback_type_id", "id", "title", "text", "user_account_id"}
	feedbackColumnsWithDefault    = []string{}
	feedbackPrimaryKeyColumns     = []string{"id"}
)

type (
	// FeedbackSlice is an alias for a slice of pointers to Feedback.
	// This should generally be used opposed to []Feedback.
	FeedbackSlice []*Feedback
	// FeedbackHook is the signature for custom Feedback hook methods
	FeedbackHook func(context.Context, boil.ContextExecutor, *Feedback) error

	feedbackQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	feedbackType                 = reflect.TypeOf(&Feedback{})
	feedbackMapping              = queries.MakeStructMapping(feedbackType)
	feedbackPrimaryKeyMapping, _ = queries.BindMapping(feedbackType, feedbackMapping, feedbackPrimaryKeyColumns)
	feedbackInsertCacheMut       sync.RWMutex
	feedbackInsertCache          = make(map[string]insertCache)
	feedbackUpdateCacheMut       sync.RWMutex
	feedbackUpdateCache          = make(map[string]updateCache)
	feedbackUpsertCacheMut       sync.RWMutex
	feedbackUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var feedbackBeforeInsertHooks []FeedbackHook
var feedbackBeforeUpdateHooks []FeedbackHook
var feedbackBeforeDeleteHooks []FeedbackHook
var feedbackBeforeUpsertHooks []FeedbackHook

var feedbackAfterInsertHooks []FeedbackHook
var feedbackAfterSelectHooks []FeedbackHook
var feedbackAfterUpdateHooks []FeedbackHook
var feedbackAfterDeleteHooks []FeedbackHook
var feedbackAfterUpsertHooks []FeedbackHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Feedback) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Feedback) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Feedback) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Feedback) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Feedback) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Feedback) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Feedback) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Feedback) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Feedback) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFeedbackHook registers your hook function for all future operations.
func AddFeedbackHook(hookPoint boil.HookPoint, feedbackHook FeedbackHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		feedbackBeforeInsertHooks = append(feedbackBeforeInsertHooks, feedbackHook)
	case boil.BeforeUpdateHook:
		feedbackBeforeUpdateHooks = append(feedbackBeforeUpdateHooks, feedbackHook)
	case boil.BeforeDeleteHook:
		feedbackBeforeDeleteHooks = append(feedbackBeforeDeleteHooks, feedbackHook)
	case boil.BeforeUpsertHook:
		feedbackBeforeUpsertHooks = append(feedbackBeforeUpsertHooks, feedbackHook)
	case boil.AfterInsertHook:
		feedbackAfterInsertHooks = append(feedbackAfterInsertHooks, feedbackHook)
	case boil.AfterSelectHook:
		feedbackAfterSelectHooks = append(feedbackAfterSelectHooks, feedbackHook)
	case boil.AfterUpdateHook:
		feedbackAfterUpdateHooks = append(feedbackAfterUpdateHooks, feedbackHook)
	case boil.AfterDeleteHook:
		feedbackAfterDeleteHooks = append(feedbackAfterDeleteHooks, feedbackHook)
	case boil.AfterUpsertHook:
		feedbackAfterUpsertHooks = append(feedbackAfterUpsertHooks, feedbackHook)
	}
}

// One returns a single feedback record from the query.
func (q feedbackQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Feedback, error) {
	o := &Feedback{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "crdb: failed to execute a one query for feedback")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Feedback records from the query.
func (q feedbackQuery) All(ctx context.Context, exec boil.ContextExecutor) (FeedbackSlice, error) {
	var o []*Feedback

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "crdb: failed to assign all query results to Feedback slice")
	}

	if len(feedbackAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Feedback records in the query.
func (q feedbackQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to count feedback rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q feedbackQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "crdb: failed to check if feedback exists")
	}

	return count > 0, nil
}

// FeedbackComments retrieves all the feedback_comment's FeedbackComments with an executor.
func (o *Feedback) FeedbackComments(mods ...qm.QueryMod) feedbackCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"feedback_comments\".\"feedback_id\"=?", o.ID),
	)

	query := FeedbackComments(queryMods...)
	queries.SetFrom(query.Query, "\"feedback_comments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"feedback_comments\".*"})
	}

	return query
}

// LoadFeedbackComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (feedbackL) LoadFeedbackComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFeedback interface{}, mods queries.Applicator) error {
	var slice []*Feedback
	var object *Feedback

	if singular {
		object = maybeFeedback.(*Feedback)
	} else {
		slice = *maybeFeedback.(*[]*Feedback)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &feedbackR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &feedbackR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`feedback_comments`), qm.WhereIn(`feedback_comments.feedback_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load feedback_comments")
	}

	var resultSlice []*FeedbackComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice feedback_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on feedback_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for feedback_comments")
	}

	if len(feedbackCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FeedbackComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &feedbackCommentR{}
			}
			foreign.R.Feedback = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FeedbackID {
				local.R.FeedbackComments = append(local.R.FeedbackComments, foreign)
				if foreign.R == nil {
					foreign.R = &feedbackCommentR{}
				}
				foreign.R.Feedback = local
				break
			}
		}
	}

	return nil
}

// AddFeedbackComments adds the given related objects to the existing relationships
// of the feedback, optionally inserting them as new records.
// Appends related to o.R.FeedbackComments.
// Sets related.R.Feedback appropriately.
func (o *Feedback) AddFeedbackComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FeedbackComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FeedbackID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"feedback_comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"feedback_id"}),
				strmangle.WhereClause("\"", "\"", 2, feedbackCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FeedbackID = o.ID
		}
	}

	if o.R == nil {
		o.R = &feedbackR{
			FeedbackComments: related,
		}
	} else {
		o.R.FeedbackComments = append(o.R.FeedbackComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &feedbackCommentR{
				Feedback: o,
			}
		} else {
			rel.R.Feedback = o
		}
	}
	return nil
}

// Feedbacks retrieves all the records using an executor.
func Feedbacks(mods ...qm.QueryMod) feedbackQuery {
	mods = append(mods, qm.From("\"feedback\""))
	return feedbackQuery{NewQuery(mods...)}
}

// FindFeedback retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFeedback(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Feedback, error) {
	feedbackObj := &Feedback{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"feedback\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, feedbackObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "crdb: unable to select from feedback")
	}

	return feedbackObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Feedback) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("crdb: no feedback provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(feedbackColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	feedbackInsertCacheMut.RLock()
	cache, cached := feedbackInsertCache[key]
	feedbackInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			feedbackAllColumns,
			feedbackColumnsWithDefault,
			feedbackColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(feedbackType, feedbackMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(feedbackType, feedbackMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"feedback\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"feedback\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "crdb: unable to insert into feedback")
	}

	if !cached {
		feedbackInsertCacheMut.Lock()
		feedbackInsertCache[key] = cache
		feedbackInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Feedback.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Feedback) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	feedbackUpdateCacheMut.RLock()
	cache, cached := feedbackUpdateCache[key]
	feedbackUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			feedbackAllColumns,
			feedbackPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("crdb: unable to update feedback, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"feedback\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, feedbackPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(feedbackType, feedbackMapping, append(wl, feedbackPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to update feedback row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by update for feedback")
	}

	if !cached {
		feedbackUpdateCacheMut.Lock()
		feedbackUpdateCache[key] = cache
		feedbackUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q feedbackQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to update all for feedback")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to retrieve rows affected for feedback")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FeedbackSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("crdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedbackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"feedback\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, feedbackPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to update all in feedback slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to retrieve rows affected all in update all feedback")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Feedback) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("crdb: no feedback provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(feedbackColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	feedbackUpsertCacheMut.RLock()
	cache, cached := feedbackUpsertCache[key]
	feedbackUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			feedbackAllColumns,
			feedbackColumnsWithDefault,
			feedbackColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			feedbackAllColumns,
			feedbackPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("crdb: unable to upsert feedback, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(feedbackPrimaryKeyColumns))
			copy(conflict, feedbackPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"feedback\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(feedbackType, feedbackMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(feedbackType, feedbackMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "crdb: unable to upsert feedback")
	}

	if !cached {
		feedbackUpsertCacheMut.Lock()
		feedbackUpsertCache[key] = cache
		feedbackUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Feedback record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Feedback) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("crdb: no Feedback provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), feedbackPrimaryKeyMapping)
	sql := "DELETE FROM \"feedback\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to delete from feedback")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by delete for feedback")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q feedbackQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("crdb: no feedbackQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to delete all from feedback")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by deleteall for feedback")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FeedbackSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(feedbackBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedbackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"feedback\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, feedbackPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to delete all from feedback slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by deleteall for feedback")
	}

	if len(feedbackAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Feedback) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFeedback(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FeedbackSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FeedbackSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedbackPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"feedback\".* FROM \"feedback\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, feedbackPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "crdb: unable to reload all in FeedbackSlice")
	}

	*o = slice

	return nil
}

// FeedbackExists checks if the Feedback row exists.
func FeedbackExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"feedback\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "crdb: unable to check if feedback exists")
	}

	return exists, nil
}
