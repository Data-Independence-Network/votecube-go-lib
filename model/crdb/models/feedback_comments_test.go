// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package crdb

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFeedbackComments(t *testing.T) {
	t.Parallel()

	query := FeedbackComments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFeedbackCommentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedbackCommentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FeedbackComments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedbackCommentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FeedbackCommentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedbackCommentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FeedbackCommentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FeedbackComment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FeedbackCommentExists to return true, but got false.")
	}
}

func testFeedbackCommentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	feedbackCommentFound, err := FindFeedbackComment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if feedbackCommentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFeedbackCommentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FeedbackComments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFeedbackCommentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FeedbackComments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFeedbackCommentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	feedbackCommentOne := &FeedbackComment{}
	feedbackCommentTwo := &FeedbackComment{}
	if err = randomize.Struct(seed, feedbackCommentOne, feedbackCommentDBTypes, false, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}
	if err = randomize.Struct(seed, feedbackCommentTwo, feedbackCommentDBTypes, false, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = feedbackCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = feedbackCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FeedbackComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFeedbackCommentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	feedbackCommentOne := &FeedbackComment{}
	feedbackCommentTwo := &FeedbackComment{}
	if err = randomize.Struct(seed, feedbackCommentOne, feedbackCommentDBTypes, false, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}
	if err = randomize.Struct(seed, feedbackCommentTwo, feedbackCommentDBTypes, false, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = feedbackCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = feedbackCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func feedbackCommentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func feedbackCommentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FeedbackComment) error {
	*o = FeedbackComment{}
	return nil
}

func testFeedbackCommentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FeedbackComment{}
	o := &FeedbackComment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FeedbackComment object: %s", err)
	}

	AddFeedbackCommentHook(boil.BeforeInsertHook, feedbackCommentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	feedbackCommentBeforeInsertHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.AfterInsertHook, feedbackCommentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	feedbackCommentAfterInsertHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.AfterSelectHook, feedbackCommentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	feedbackCommentAfterSelectHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.BeforeUpdateHook, feedbackCommentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	feedbackCommentBeforeUpdateHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.AfterUpdateHook, feedbackCommentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	feedbackCommentAfterUpdateHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.BeforeDeleteHook, feedbackCommentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	feedbackCommentBeforeDeleteHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.AfterDeleteHook, feedbackCommentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	feedbackCommentAfterDeleteHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.BeforeUpsertHook, feedbackCommentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	feedbackCommentBeforeUpsertHooks = []FeedbackCommentHook{}

	AddFeedbackCommentHook(boil.AfterUpsertHook, feedbackCommentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	feedbackCommentAfterUpsertHooks = []FeedbackCommentHook{}
}

func testFeedbackCommentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFeedbackCommentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(feedbackCommentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFeedbackCommentToOneFeedbackUsingFeedback(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FeedbackComment
	var foreign Feedback

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, feedbackCommentDBTypes, false, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, feedbackDBTypes, false, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FeedbackID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Feedback().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FeedbackCommentSlice{&local}
	if err = local.L.LoadFeedback(ctx, tx, false, (*[]*FeedbackComment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Feedback == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Feedback = nil
	if err = local.L.LoadFeedback(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Feedback == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFeedbackCommentToOneSetOpFeedbackUsingFeedback(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FeedbackComment
	var b, c Feedback

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, feedbackCommentDBTypes, false, strmangle.SetComplement(feedbackCommentPrimaryKeyColumns, feedbackCommentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, feedbackDBTypes, false, strmangle.SetComplement(feedbackPrimaryKeyColumns, feedbackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, feedbackDBTypes, false, strmangle.SetComplement(feedbackPrimaryKeyColumns, feedbackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Feedback{&b, &c} {
		err = a.SetFeedback(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Feedback != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FeedbackComments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FeedbackID != x.ID {
			t.Error("foreign key was wrong value", a.FeedbackID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FeedbackID))
		reflect.Indirect(reflect.ValueOf(&a.FeedbackID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FeedbackID != x.ID {
			t.Error("foreign key was wrong value", a.FeedbackID, x.ID)
		}
	}
}

func testFeedbackCommentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFeedbackCommentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FeedbackCommentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFeedbackCommentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FeedbackComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	feedbackCommentDBTypes = map[string]string{`AgeSuitability`: `int8`, `CreatedAt`: `timestamptz`, `FeedbackID`: `int8`, `ID`: `int8`, `Title`: `varchar`, `Text`: `varchar`, `UserAccountID`: `int8`}
	_                      = bytes.MinRead
)

func testFeedbackCommentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(feedbackCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(feedbackCommentAllColumns) == len(feedbackCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFeedbackCommentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(feedbackCommentAllColumns) == len(feedbackCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FeedbackComment{}
	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, feedbackCommentDBTypes, true, feedbackCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(feedbackCommentAllColumns, feedbackCommentPrimaryKeyColumns) {
		fields = feedbackCommentAllColumns
	} else {
		fields = strmangle.SetComplement(
			feedbackCommentAllColumns,
			feedbackCommentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FeedbackCommentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFeedbackCommentsUpsert(t *testing.T) {
	t.Parallel()

	if len(feedbackCommentAllColumns) == len(feedbackCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FeedbackComment{}
	if err = randomize.Struct(seed, &o, feedbackCommentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FeedbackComment: %s", err)
	}

	count, err := FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, feedbackCommentDBTypes, false, feedbackCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FeedbackComment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FeedbackComment: %s", err)
	}

	count, err = FeedbackComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
