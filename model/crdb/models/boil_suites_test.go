// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package crdb

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Feedbacks", testFeedbacks)
	t.Run("FeedbackComments", testFeedbackComments)
	t.Run("UserAccounts", testUserAccounts)
}

func TestDelete(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksDelete)
	t.Run("FeedbackComments", testFeedbackCommentsDelete)
	t.Run("UserAccounts", testUserAccountsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksQueryDeleteAll)
	t.Run("FeedbackComments", testFeedbackCommentsQueryDeleteAll)
	t.Run("UserAccounts", testUserAccountsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksSliceDeleteAll)
	t.Run("FeedbackComments", testFeedbackCommentsSliceDeleteAll)
	t.Run("UserAccounts", testUserAccountsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksExists)
	t.Run("FeedbackComments", testFeedbackCommentsExists)
	t.Run("UserAccounts", testUserAccountsExists)
}

func TestFind(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksFind)
	t.Run("FeedbackComments", testFeedbackCommentsFind)
	t.Run("UserAccounts", testUserAccountsFind)
}

func TestBind(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksBind)
	t.Run("FeedbackComments", testFeedbackCommentsBind)
	t.Run("UserAccounts", testUserAccountsBind)
}

func TestOne(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksOne)
	t.Run("FeedbackComments", testFeedbackCommentsOne)
	t.Run("UserAccounts", testUserAccountsOne)
}

func TestAll(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksAll)
	t.Run("FeedbackComments", testFeedbackCommentsAll)
	t.Run("UserAccounts", testUserAccountsAll)
}

func TestCount(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksCount)
	t.Run("FeedbackComments", testFeedbackCommentsCount)
	t.Run("UserAccounts", testUserAccountsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksHooks)
	t.Run("FeedbackComments", testFeedbackCommentsHooks)
	t.Run("UserAccounts", testUserAccountsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksInsert)
	t.Run("Feedbacks", testFeedbacksInsertWhitelist)
	t.Run("FeedbackComments", testFeedbackCommentsInsert)
	t.Run("FeedbackComments", testFeedbackCommentsInsertWhitelist)
	t.Run("UserAccounts", testUserAccountsInsert)
	t.Run("UserAccounts", testUserAccountsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("FeedbackCommentToFeedbackUsingFeedback", testFeedbackCommentToOneFeedbackUsingFeedback)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("FeedbackToFeedbackComments", testFeedbackToManyFeedbackComments)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("FeedbackCommentToFeedbackUsingFeedbackComments", testFeedbackCommentToOneSetOpFeedbackUsingFeedback)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("FeedbackToFeedbackComments", testFeedbackToManyAddOpFeedbackComments)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksReload)
	t.Run("FeedbackComments", testFeedbackCommentsReload)
	t.Run("UserAccounts", testUserAccountsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksReloadAll)
	t.Run("FeedbackComments", testFeedbackCommentsReloadAll)
	t.Run("UserAccounts", testUserAccountsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksSelect)
	t.Run("FeedbackComments", testFeedbackCommentsSelect)
	t.Run("UserAccounts", testUserAccountsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksUpdate)
	t.Run("FeedbackComments", testFeedbackCommentsUpdate)
	t.Run("UserAccounts", testUserAccountsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Feedbacks", testFeedbacksSliceUpdateAll)
	t.Run("FeedbackComments", testFeedbackCommentsSliceUpdateAll)
	t.Run("UserAccounts", testUserAccountsSliceUpdateAll)
}
