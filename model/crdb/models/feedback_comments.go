// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package crdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FeedbackComment is an object representing the database table.
type FeedbackComment struct {
	AgeSuitability int64     `boil:"age_suitability" json:"age_suitability" toml:"age_suitability" yaml:"age_suitability"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	FeedbackID     int64     `boil:"feedback_id" json:"feedback_id" toml:"feedback_id" yaml:"feedback_id"`
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title          string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Text           string    `boil:"text" json:"text" toml:"text" yaml:"text"`
	UserAccountID  int64     `boil:"user_account_id" json:"user_account_id" toml:"user_account_id" yaml:"user_account_id"`

	R *feedbackCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L feedbackCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FeedbackCommentColumns = struct {
	AgeSuitability string
	CreatedAt      string
	FeedbackID     string
	ID             string
	Title          string
	Text           string
	UserAccountID  string
}{
	AgeSuitability: "age_suitability",
	CreatedAt:      "created_at",
	FeedbackID:     "feedback_id",
	ID:             "id",
	Title:          "title",
	Text:           "text",
	UserAccountID:  "user_account_id",
}

// Generated where

var FeedbackCommentWhere = struct {
	AgeSuitability whereHelperint64
	CreatedAt      whereHelpertime_Time
	FeedbackID     whereHelperint64
	ID             whereHelperint64
	Title          whereHelperstring
	Text           whereHelperstring
	UserAccountID  whereHelperint64
}{
	AgeSuitability: whereHelperint64{field: "\"feedback_comments\".\"age_suitability\""},
	CreatedAt:      whereHelpertime_Time{field: "\"feedback_comments\".\"created_at\""},
	FeedbackID:     whereHelperint64{field: "\"feedback_comments\".\"feedback_id\""},
	ID:             whereHelperint64{field: "\"feedback_comments\".\"id\""},
	Title:          whereHelperstring{field: "\"feedback_comments\".\"title\""},
	Text:           whereHelperstring{field: "\"feedback_comments\".\"text\""},
	UserAccountID:  whereHelperint64{field: "\"feedback_comments\".\"user_account_id\""},
}

// FeedbackCommentRels is where relationship names are stored.
var FeedbackCommentRels = struct {
	Feedback string
}{
	Feedback: "Feedback",
}

// feedbackCommentR is where relationships are stored.
type feedbackCommentR struct {
	Feedback *Feedback
}

// NewStruct creates a new relationship struct
func (*feedbackCommentR) NewStruct() *feedbackCommentR {
	return &feedbackCommentR{}
}

// feedbackCommentL is where Load methods for each relationship are stored.
type feedbackCommentL struct{}

var (
	feedbackCommentAllColumns            = []string{"age_suitability", "created_at", "feedback_id", "id", "title", "text", "user_account_id"}
	feedbackCommentColumnsWithoutDefault = []string{"age_suitability", "created_at", "feedback_id", "id", "title", "text", "user_account_id"}
	feedbackCommentColumnsWithDefault    = []string{}
	feedbackCommentPrimaryKeyColumns     = []string{"id"}
)

type (
	// FeedbackCommentSlice is an alias for a slice of pointers to FeedbackComment.
	// This should generally be used opposed to []FeedbackComment.
	FeedbackCommentSlice []*FeedbackComment
	// FeedbackCommentHook is the signature for custom FeedbackComment hook methods
	FeedbackCommentHook func(context.Context, boil.ContextExecutor, *FeedbackComment) error

	feedbackCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	feedbackCommentType                 = reflect.TypeOf(&FeedbackComment{})
	feedbackCommentMapping              = queries.MakeStructMapping(feedbackCommentType)
	feedbackCommentPrimaryKeyMapping, _ = queries.BindMapping(feedbackCommentType, feedbackCommentMapping, feedbackCommentPrimaryKeyColumns)
	feedbackCommentInsertCacheMut       sync.RWMutex
	feedbackCommentInsertCache          = make(map[string]insertCache)
	feedbackCommentUpdateCacheMut       sync.RWMutex
	feedbackCommentUpdateCache          = make(map[string]updateCache)
	feedbackCommentUpsertCacheMut       sync.RWMutex
	feedbackCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var feedbackCommentBeforeInsertHooks []FeedbackCommentHook
var feedbackCommentBeforeUpdateHooks []FeedbackCommentHook
var feedbackCommentBeforeDeleteHooks []FeedbackCommentHook
var feedbackCommentBeforeUpsertHooks []FeedbackCommentHook

var feedbackCommentAfterInsertHooks []FeedbackCommentHook
var feedbackCommentAfterSelectHooks []FeedbackCommentHook
var feedbackCommentAfterUpdateHooks []FeedbackCommentHook
var feedbackCommentAfterDeleteHooks []FeedbackCommentHook
var feedbackCommentAfterUpsertHooks []FeedbackCommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FeedbackComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FeedbackComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FeedbackComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FeedbackComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FeedbackComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FeedbackComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FeedbackComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FeedbackComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FeedbackComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range feedbackCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFeedbackCommentHook registers your hook function for all future operations.
func AddFeedbackCommentHook(hookPoint boil.HookPoint, feedbackCommentHook FeedbackCommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		feedbackCommentBeforeInsertHooks = append(feedbackCommentBeforeInsertHooks, feedbackCommentHook)
	case boil.BeforeUpdateHook:
		feedbackCommentBeforeUpdateHooks = append(feedbackCommentBeforeUpdateHooks, feedbackCommentHook)
	case boil.BeforeDeleteHook:
		feedbackCommentBeforeDeleteHooks = append(feedbackCommentBeforeDeleteHooks, feedbackCommentHook)
	case boil.BeforeUpsertHook:
		feedbackCommentBeforeUpsertHooks = append(feedbackCommentBeforeUpsertHooks, feedbackCommentHook)
	case boil.AfterInsertHook:
		feedbackCommentAfterInsertHooks = append(feedbackCommentAfterInsertHooks, feedbackCommentHook)
	case boil.AfterSelectHook:
		feedbackCommentAfterSelectHooks = append(feedbackCommentAfterSelectHooks, feedbackCommentHook)
	case boil.AfterUpdateHook:
		feedbackCommentAfterUpdateHooks = append(feedbackCommentAfterUpdateHooks, feedbackCommentHook)
	case boil.AfterDeleteHook:
		feedbackCommentAfterDeleteHooks = append(feedbackCommentAfterDeleteHooks, feedbackCommentHook)
	case boil.AfterUpsertHook:
		feedbackCommentAfterUpsertHooks = append(feedbackCommentAfterUpsertHooks, feedbackCommentHook)
	}
}

// One returns a single feedbackComment record from the query.
func (q feedbackCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FeedbackComment, error) {
	o := &FeedbackComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "crdb: failed to execute a one query for feedback_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FeedbackComment records from the query.
func (q feedbackCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (FeedbackCommentSlice, error) {
	var o []*FeedbackComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "crdb: failed to assign all query results to FeedbackComment slice")
	}

	if len(feedbackCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FeedbackComment records in the query.
func (q feedbackCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to count feedback_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q feedbackCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "crdb: failed to check if feedback_comments exists")
	}

	return count > 0, nil
}

// Feedback pointed to by the foreign key.
func (o *FeedbackComment) Feedback(mods ...qm.QueryMod) feedbackQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FeedbackID),
	}

	queryMods = append(queryMods, mods...)

	query := Feedbacks(queryMods...)
	queries.SetFrom(query.Query, "\"feedback\"")

	return query
}

// LoadFeedback allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (feedbackCommentL) LoadFeedback(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFeedbackComment interface{}, mods queries.Applicator) error {
	var slice []*FeedbackComment
	var object *FeedbackComment

	if singular {
		object = maybeFeedbackComment.(*FeedbackComment)
	} else {
		slice = *maybeFeedbackComment.(*[]*FeedbackComment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &feedbackCommentR{}
		}
		args = append(args, object.FeedbackID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &feedbackCommentR{}
			}

			for _, a := range args {
				if a == obj.FeedbackID {
					continue Outer
				}
			}

			args = append(args, obj.FeedbackID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`feedback`), qm.WhereIn(`feedback.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Feedback")
	}

	var resultSlice []*Feedback
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Feedback")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for feedback")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for feedback")
	}

	if len(feedbackCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Feedback = foreign
		if foreign.R == nil {
			foreign.R = &feedbackR{}
		}
		foreign.R.FeedbackComments = append(foreign.R.FeedbackComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FeedbackID == foreign.ID {
				local.R.Feedback = foreign
				if foreign.R == nil {
					foreign.R = &feedbackR{}
				}
				foreign.R.FeedbackComments = append(foreign.R.FeedbackComments, local)
				break
			}
		}
	}

	return nil
}

// SetFeedback of the feedbackComment to the related item.
// Sets o.R.Feedback to related.
// Adds o to related.R.FeedbackComments.
func (o *FeedbackComment) SetFeedback(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Feedback) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"feedback_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"feedback_id"}),
		strmangle.WhereClause("\"", "\"", 2, feedbackCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FeedbackID = related.ID
	if o.R == nil {
		o.R = &feedbackCommentR{
			Feedback: related,
		}
	} else {
		o.R.Feedback = related
	}

	if related.R == nil {
		related.R = &feedbackR{
			FeedbackComments: FeedbackCommentSlice{o},
		}
	} else {
		related.R.FeedbackComments = append(related.R.FeedbackComments, o)
	}

	return nil
}

// FeedbackComments retrieves all the records using an executor.
func FeedbackComments(mods ...qm.QueryMod) feedbackCommentQuery {
	mods = append(mods, qm.From("\"feedback_comments\""))
	return feedbackCommentQuery{NewQuery(mods...)}
}

// FindFeedbackComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFeedbackComment(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*FeedbackComment, error) {
	feedbackCommentObj := &FeedbackComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"feedback_comments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, feedbackCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "crdb: unable to select from feedback_comments")
	}

	return feedbackCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FeedbackComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("crdb: no feedback_comments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(feedbackCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	feedbackCommentInsertCacheMut.RLock()
	cache, cached := feedbackCommentInsertCache[key]
	feedbackCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			feedbackCommentAllColumns,
			feedbackCommentColumnsWithDefault,
			feedbackCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(feedbackCommentType, feedbackCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(feedbackCommentType, feedbackCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"feedback_comments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"feedback_comments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "crdb: unable to insert into feedback_comments")
	}

	if !cached {
		feedbackCommentInsertCacheMut.Lock()
		feedbackCommentInsertCache[key] = cache
		feedbackCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FeedbackComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FeedbackComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	feedbackCommentUpdateCacheMut.RLock()
	cache, cached := feedbackCommentUpdateCache[key]
	feedbackCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			feedbackCommentAllColumns,
			feedbackCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("crdb: unable to update feedback_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"feedback_comments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, feedbackCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(feedbackCommentType, feedbackCommentMapping, append(wl, feedbackCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to update feedback_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by update for feedback_comments")
	}

	if !cached {
		feedbackCommentUpdateCacheMut.Lock()
		feedbackCommentUpdateCache[key] = cache
		feedbackCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q feedbackCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to update all for feedback_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to retrieve rows affected for feedback_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FeedbackCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("crdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedbackCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"feedback_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, feedbackCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to update all in feedbackComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to retrieve rows affected all in update all feedbackComment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FeedbackComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("crdb: no feedback_comments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(feedbackCommentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	feedbackCommentUpsertCacheMut.RLock()
	cache, cached := feedbackCommentUpsertCache[key]
	feedbackCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			feedbackCommentAllColumns,
			feedbackCommentColumnsWithDefault,
			feedbackCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			feedbackCommentAllColumns,
			feedbackCommentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("crdb: unable to upsert feedback_comments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(feedbackCommentPrimaryKeyColumns))
			copy(conflict, feedbackCommentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"feedback_comments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(feedbackCommentType, feedbackCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(feedbackCommentType, feedbackCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "crdb: unable to upsert feedback_comments")
	}

	if !cached {
		feedbackCommentUpsertCacheMut.Lock()
		feedbackCommentUpsertCache[key] = cache
		feedbackCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FeedbackComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FeedbackComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("crdb: no FeedbackComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), feedbackCommentPrimaryKeyMapping)
	sql := "DELETE FROM \"feedback_comments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to delete from feedback_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by delete for feedback_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q feedbackCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("crdb: no feedbackCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to delete all from feedback_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by deleteall for feedback_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FeedbackCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(feedbackCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedbackCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"feedback_comments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, feedbackCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "crdb: unable to delete all from feedbackComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "crdb: failed to get rows affected by deleteall for feedback_comments")
	}

	if len(feedbackCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FeedbackComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFeedbackComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FeedbackCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FeedbackCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), feedbackCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"feedback_comments\".* FROM \"feedback_comments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, feedbackCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "crdb: unable to reload all in FeedbackCommentSlice")
	}

	*o = slice

	return nil
}

// FeedbackCommentExists checks if the FeedbackComment row exists.
func FeedbackCommentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"feedback_comments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "crdb: unable to check if feedback_comments exists")
	}

	return exists, nil
}
